" Get current os (to define os specific configs)
if !exists("g:os")
	if  has("win32")
		let g:os = "Windows"
    else
		let g:os = substitute(system('uname'), '\n', '', '')
	endif
endif

let g:mapleader=' '
let g:maplocalleader=' '

" ----------- Options start ----------- "
" Basic options
filetype plugin indent on
syntax on
" set timeoutlen=250
set updatetime=100
set showcmd
set directory=$HOME/.vim/swapfiles//
set noswapfile
set confirm
set nu
set rnu
set mouse=a
set scrolloff=10
set laststatus=2
set undofile
set undodir=$HOME/.vim/undo//
set splitbelow
set splitright
set expandtab

" runtime path
" set rtp+=/opt/homebrew/opt/fzf

" Appearance
set termguicolors
set fillchars=eob:\•
" set t_Co=256

" Search
set hlsearch
set incsearch
set smartcase

" Editing
set smartindent
set smarttab
set tabstop=4
set shiftwidth=4
set listchars+=lead:\ 
" ----------- Options end ----------- "


" ----------- Plugins start ----------- "
call plug#begin()
" colorschemes
Plug 'ayu-theme/ayu-vim'
Plug 'danilo-augusto/vim-afterglow'
Plug 'NLKNguyen/papercolor-theme'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'joelbeedle/pseudo-syntax'
Plug 'bronson/vim-visual-star-search'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-vinegar'
Plug 'Yggdroot/indentLine'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'rhysd/committia.vim'

Plug 'mityu/vim-applescript'

" Lsp
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
if has("python3")
    Plug 'SirVer/ultisnips'
endif
Plug 'thomasfaingnaert/vim-lsp-snippets'
Plug 'thomasfaingnaert/vim-lsp-ultisnips'

call plug#end()
" ----------- Plugins end ----------- "

" committia.vim
let g:committia_status_window_min_height = 80
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    endif

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-d> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-u> <Plug>(committia-scroll-diff-up-half)
endfunction

function! GitGutterNextHunkCycle()
  let line = line('.')
  silent! GitGutterNextHunk
  if line('.') == line
    1
    GitGutterNextHunk
  endif
endfunction

let g:colorscheme="catppuccin_mocha"

let g:airline_theme='transparent'

let g:indentLine_enabled = 1
let g:indentLine_setColors = 0
" let g:indentLine_color_term = 256
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" let g:indentLine_char_list=['│']
let g:indentLine_char_list=['▏']

let g:afterglow_inherit_background=1

let g:PaperColor_Theme_Options = {
			\   'language': {
			\     'python': {
			\       'highlight_builtins' : 1
			\     },
			\     'cpp': {
			\       'highlight_standard_library': 1
			\     },
			\     'c': {
			\       'highlight_builtins' : 1
			\     }
			\   }
			\ }

" Lsp settings
let g:lsp_settings_filetype_zsh = ['bash-language-server']

" if executable('pylsp')
"     " pip install python-lsp-server
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'pylsp',
"         \ 'cmd': {server_info->['pylsp']},
"         \ 'allowlist': ['python'],
"         \ })
" endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" ----------- Custom key mappings start ----------- 
" Reload vimrc
nnoremap <leader>R :so ~/.vim/vimrc<CR>

" Find and Replace
nnoremap <leader>r :%s///g<left><left>
nnoremap <leader>rc :%s///gc<left><left><left>
xnoremap <leader>r :s///g<left><left>
xnoremap <leader>rc :s///gc<left><left><left>

" Search
nnoremap <Esc> :nohlsearch<CR>

" Copy, paste and delete
xnoremap <leader>p "_dP
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+Y

" New lines
nnoremap <leader>o o<Esc>"_S
nnoremap <leader>O O<Esc>"_S
inoremap <C-CR> <Esc>jA
inoremap <S-CR> <Esc>oS

" Moving lines
if g:os == "Darwin"
	vnoremap ∆ :m '>+1<CR>gv=gv
	vnoremap ˚ :m '<-2<CR>gv=gv
	nnoremap ∆ :m .+1<CR>==
	nnoremap ˚ :m .-2<CR>==
	inoremap ∆ <Esc>:m .+1<CR>==gi
	inoremap ˚ <Esc>:m .-2<CR>==gi
else
	vnoremap <A-j> :m '>+1<CR>gv=gv
	vnoremap <A-k> :m '<-2<CR>gv=gv
	nnoremap <A-j> :m .+1<CR>==
	nnoremap <A-k> :m .-2<CR>==
	inoremap <A-j> <Esc>:m .+1<CR>==gi
	inoremap <A-k> <Esc>:m .-2<CR>==gi
endif

nnoremap <leader>lf :LspDocumentFormat<CR>

" fzf
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fg :Rg<CR>
nnoremap <leader>fF :GFiles<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>fm :Marks<CR>
nnoremap <leader>fh :Helptags<CR>
" ----------- Custom key mappings end ----------- 

" ----------- Auto commands start ----------- "
autocmd VimEnter * execute "colorscheme " . g:colorscheme
autocmd VimEnter * hi Normal ctermbg=NONE guibg=NONE
autocmd VimEnter * hi NonText ctermbg=NONE guibg=NONE

autocmd SourcePost * execute "colorscheme " . g:colorscheme
autocmd SourcePost * hi Normal ctermbg=NONE guibg=NONE
autocmd SourcePost * hi EndOfBuffer ctermbg=NONE guibg=NONE

autocmd ColorScheme * hi Normal ctermbg=NONE guibg=NONE
autocmd ColorScheme * hi EndOfBuffer ctermbg=NONE guibg=NONE

augroup file_type
    autocmd!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd BufEnter *.zsh,.zshrc,.zprofile,.zshenv set ft=sh
    autocmd BufEnter *.zsh,.zshrc,.zprofile,.zshenv set syntax=zsh
augroup END
" ----------- Auto commands end ----------- 

